///////////////////////////////////////////////////////////////////////
// DO NOT EDIT THIS FILE
//
// Compile this file using clang++, g++, or 
// Microsoft Visual Studio C++ compiler.
//
// To compile using Clang type:
//   clang++ main.cpp -O3 -std=c++17 -o main
//

#include <string>
#include <vector>
#include "test_framework.h"
#include "student_code_3.h"

const char* smallDataset = "small_problem_set_3.in";
const char* largeDataset = "large_problem_set_3.in";

const char*  helpMsg = "Please, indicate which problem set to use.\n\n"
                       "For small problem set, type: ./problem_solver_3 small\n"
                       "For large problem set, type: ./problem_solver_3 large\n";

const char* strNotice = "##################################\n"
                        "# Do not edit this file!\n"
                        "##################################\n";

constexpr int problem_set_id = 3;

struct ProblemN3: public TestFramework::BasicProblem
{
   std::vector<int> prices;
   std::vector<int> ids;
   std::vector<int> premiums;
   int radius;
   int cycles;
};

int AvgPriceIncrease(const std::vector<int>& prices, 
                     const std::vector<int>& ids, 
                     const std::vector<int>& premiums, 
                     int radius,
                     int cycles)
{
   int nUpdatesPerCycle = ids.size();
   int nUpdates = nUpdatesPerCycle * cycles;
   const char* invalidData = "The problem set file is corrupted.";

   TestFramework::ExitIfConditionFails(cycles > 0, invalidData);
   TestFramework::ExitIfConditionFails(premiums.size() == nUpdatesPerCycle, invalidData);

   std::vector<PriceUpdate> updates(nUpdates);
   for (int src = 0, dst = 0; dst < nUpdates; ++src, ++dst)
   {
      src = (src == nUpdatesPerCycle) ? 0 : src;
      updates[dst].premium = premiums[src];
      updates[dst].restaurantID = ids[src];
   }

   return AvgPriceIncrease(prices, updates, radius);
}

int main(int argc, char *argv[])
{
   using namespace TestFramework;

   static_assert (GetTestFrameworkVersion () == 7,
      "TestFramework version 7 is required. Please, update test_framework.h.");

   if ((argc != 2) && (argc != 3))
   {
      std::cout << helpMsg;
   }

   std::string firstArg(DefaultProblemSet());

   if (argc >= 2)
   {
      firstArg = argv[1];
   }
   else
   {
      std::cout << "\nUsing the default problem set: " << firstArg;
   }

   ExitIfConditionFails((firstArg == "small") || (firstArg == "large"), "Unknown problem set.");
   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN3> problems;
   TableAdapter<ProblemN3> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN3>(prAdapter, "prices", &ProblemN3::prices);
   AddColumn<ProblemN3>(prAdapter, "ids", &ProblemN3::ids);
   AddColumn<ProblemN3>(prAdapter, "premiums", &ProblemN3::premiums);
   AddColumn<ProblemN3>(prAdapter, "cycles", &ProblemN3::cycles);
   AddColumn<ProblemN3>(prAdapter, "neighborhood_radius", &ProblemN3::radius);
   AddColumn<ProblemN3>(prAdapter, "cycles", &ProblemN3::cycles);

   BasicYamlParser parser(dynamic_cast<ITable*>(&psAdapter),
                          dynamic_cast<ITable*>(&prAdapter));

   const char* inputFilename = bSmallDataset ? smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   header.student_name = GetStudentName();
   PreprocessProblemSet(problem_set_id, problems, header);

   for (int i = 0; i < problems.size(); ++i)
   {
      auto& theProblem = problems[i];
      theProblem.student_answer = AvgPriceIncrease(theProblem.prices, 
                                                   theProblem.ids, 
                                                   theProblem.premiums, 
                                                   theProblem.radius,
                                                   theProblem.cycles);
   }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your source code on Canvas.";
   std::cout << "\nRunning time: " << header.time << "ms";
   std::cout << std::endl << std::endl;
   std::cout << std::endl << std::endl;

   if (argc == 3)
   {
      const char * outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '" 
                << outputFilename << "'.\n";
                
      TableAdapter<ProblemN3> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, &prOutAdapter, &psAdapter, true, strNotice);
   }

   return 0;
}
